{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAO,SAACC,GACnB,OAEE,cADA,CACA,OAAKC,UAAU,iBAAf,UAEE,qBAAKC,IAAG,+BAA2BF,EAAMG,QAAQC,GAAzC,0BAAsEC,IAAI,YAClF,6BAAML,EAAMG,QAAQG,OACpB,4BAAKN,EAAMG,QAAQI,aCLZC,EAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KAAI,SAACP,GAAD,OAAc,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCN/CO,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAWF,MCmCFG,G,wDArCb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,gEASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,+BAOpC,MAK0BC,KAAKN,MAA9Bb,EALD,EAKCA,SAAUU,EALX,EAKWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAC3B,GAAD,OAAaA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAEtG,OACE,sBAAK9B,UAAY,MAAjB,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAee,KAAKf,eAC7D,cAAC,EAAD,CAAUJ,SAAWoB,W,GAhCXI,IAAMC,YCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2497a04c.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => {\n  return (\n    // Dont need key on this\n    <div className='card-container'>\n      {/* make sure to use backticks (``) so you can interpolate the endpoint */}\n      <img src={`https://robohash.org/${ props.monster.id }?set=set2&size=180x180`} alt='monster' />\n      <h2>{ props.monster.name }</h2>\n      <p>{ props.monster.email }</p>\n    </div> \n  )\n};","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\n// Functional React Component\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      { \n        props.monsters.map((monster) => (<Card key={monster.id} monster={monster} /> )) \n      }\n    </div>\n  );\n};","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      className='search'\n      type='search'\n      placeholder={ placeholder }\n      onChange={ handleChange }\n    />\n  )\n}","import React from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users}))\n  };\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  render() {\n    // Destrucured object\n    // Below is the same as writing\n    // const monsters = this.state.monsters;\n    // const searchField = this.state.serarchField;\n    const { monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter((monster) => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    \n    return (\n      <div className = \"App\" >\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder='search monsters' handleChange={ this.handleChange } />\n        <CardList monsters={ filteredMonsters } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}